#if UNITY_EDITOR
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace Game.Runtime.CMS.Editor
{
    public class CMSConstantsGenerator : AssetPostprocessor
    {
        private const string ResourcesFolderPath = "_Game/Resources/CMS";
        private const string OutputFolderPath = "_Game/Scripts/Runtime/CMS/";
        private const string OutputClassName = "CMSPrefabs";
        
        private static readonly HashSet<string> CSharpKeywords = new HashSet<string>
        {
            "abstract", "as", "base", "bool", "break", "byte", "case", "catch", "char", "checked",
            "class", "const", "continue", "decimal", "default", "delegate", "do", "double", "else",
            "enum", "event", "explicit", "extern", "false", "finally", "fixed", "float", "for",
            "foreach", "goto", "if", "implicit", "in", "int", "interface", "internal", "is", "lock",
            "long", "namespace", "new", "null", "object", "operator", "out", "override", "params",
            "private", "protected", "public", "readonly", "ref", "return", "sbyte", "sealed", "short",
            "sizeof", "stackalloc", "static", "string", "struct", "switch", "this", "throw", "true",
            "try", "typeof", "uint", "ulong", "unchecked", "unsafe", "ushort", "using", "virtual",
            "void", "volatile", "while"
        };

        [MenuItem("Tools/CMS/Reload")]
        public static void GenerateResourceClass()
        {
            CMSProvider.Unload();
            CMSProvider.Load();
            
            var resourcesPath = Path.Combine(Application.dataPath, ResourcesFolderPath);
            if (!Directory.Exists(resourcesPath))
            {
                Debug.LogError($"[CMS] Resources folder not found at path: {resourcesPath}");
                return;
            }

            var outputDirectory = Path.Combine(Application.dataPath, OutputFolderPath);
            var outputPath = Path.Combine(outputDirectory, $"{OutputClassName}.cs");

            Directory.CreateDirectory(outputDirectory);

            var codeBuilder = new StringBuilder(2048);
            GenerateFileHeader(codeBuilder);
            GenerateNamespaceAndClass(codeBuilder, resourcesPath);
            
            File.WriteAllText(outputPath, codeBuilder.ToString());
            AssetDatabase.Refresh();
            
            Debug.Log($"[CMS] Successfully generated {OutputClassName} at: {outputPath}");
        }

        private static void GenerateFileHeader(StringBuilder builder)
        {
            builder.AppendLine("//------------------------------------------------------------------------------");
            builder.AppendLine("// <auto-generated>");
            builder.AppendLine("//     This code was auto-generated by CMS Entity ID Generator.");
            builder.AppendLine("//     Changes to this file may cause incorrect behavior and will be lost if");
            builder.AppendLine("//     the code is regenerated.");
            builder.AppendLine("// </auto-generated>");
            builder.AppendLine("//------------------------------------------------------------------------------");
            builder.AppendLine();
        }

        private static void GenerateNamespaceAndClass(StringBuilder builder, string resourcesPath)
        {
            builder.AppendLine("namespace Game.Runtime.CMS");
            builder.AppendLine("{");
            builder.AppendLine($"    public static class {OutputClassName}");
            builder.AppendLine("    {");
            
            GenerateFolderConstants(resourcesPath, builder, "        ");
            
            builder.AppendLine("    }");
            builder.AppendLine("}");
        }

        private static void GenerateFolderConstants(string folderPath, StringBuilder builder, string indent)
        {
            foreach (var subFolder in Directory.GetDirectories(folderPath))
            {
                var folderName = SanitizeIdentifier(Path.GetFileName(subFolder));
                builder.AppendLine($"{indent}public static class {folderName}");
                builder.AppendLine($"{indent}{{");
                GenerateFolderConstants(subFolder, builder, indent + "    ");
                builder.AppendLine($"{indent}}}");
            }

            foreach (var file in Directory.GetFiles(folderPath).Where(f => Path.GetExtension(f).Equals(".prefab", StringComparison.OrdinalIgnoreCase)))
            {
                var fileName = SanitizeIdentifier(Path.GetFileNameWithoutExtension(file));
                if (string.IsNullOrEmpty(fileName)) continue;

                var relativePath = GetResourceRelativePath(file);
                if (relativePath != null)
                {
                    builder.AppendLine($"{indent}public const string {fileName} = \"{relativePath}\";");
                }
            }
        }

        private static string SanitizeIdentifier(string name)
        {
            if (string.IsNullOrEmpty(name)) return name;

            var builder = new StringBuilder(name.Length + 1);
            
            // Первый символ должен быть буквой или _
            if (!char.IsLetter(name[0]))
            {
                builder.Append('_');
            }

            foreach (var c in name)
            {
                builder.Append(char.IsLetterOrDigit(c) ? c : '_');
            }

            var identifier = builder.ToString();
            return CSharpKeywords.Contains(identifier) ? $"@{identifier}" : identifier;
        }

        private static string GetResourceRelativePath(string fullPath)
        {
            var resourcesIndex = fullPath.IndexOf("Resources", StringComparison.Ordinal);
            if (resourcesIndex == -1)
            {
                Debug.LogError($"[CMS] Resources folder not found in path: {fullPath}");
                return null;
            }

            var relativePath = fullPath
                .Substring(resourcesIndex + "Resources".Length + 1)
                .Replace('\\', '/');
            
            return Path.ChangeExtension(relativePath, null);
        }
    }
}
#endif